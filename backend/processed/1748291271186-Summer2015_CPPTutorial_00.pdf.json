{
  "text": "Basic **Coding** \nTutorial & Guideline\nKazuhiro Terao @ Nevis, Columbia\nFind This Document At: \n www.nevis.columbia.edu/~kazuhiro/Summer2015_CPPTutorial_00.pdf\n\nIntroduction to Programming \n& \nOverview of What We Learn\n\nWhat is “Programming?”\n• Also called “coding” \n• It is to provide a set of instructions for your computer to perform \n• Three steps to achieve in programming \n‣“Write”, “Compile”, and “Execute” your program\nHow to “Write” a Program\n• Write in a “programming language” \n‣ C/C++ is one of the most popular & basic language \n• Save it in a text file \n‣ Pick a text file editor of your choice: emacs, vim, nano, etc. etc. \n‣ This matters to your coding efficiency! Learn your editor VERY WELL!\n\nHow to “Compile” a Program\n• What does it mean to “compile”? \n‣ What you wrote is a text file \n‣ Computer doesn’t speak English (it is made by aliens) \n‣ Compile = convert your text file (English) into a computer’s language (byte) \n• Use a “Compiler” to compile your program \n‣ Made by those awesome dudes who speak alien’s language \n‣ It translates various programming language into byte code. \n‣ C++ compiler: “g++” and “clang++” as most typical choice \n• What is a “compiler” output? … roughly 2 types \n‣ “Executable” … a program that “runs” or “execute tasks” \n‣ “Library” … a byte-code description of toolkits, like “functions”\n\nLast Topic: Compiled vs. Interpreted Language\n• Compilation comes with pro and cons \n- Pros: \n‣ Compiler checks your program and finds mistakes for you \n‣ Compiled byte-code gets executed very fast  \n• Cons: \n‣ You have to learn about a compiler apart from the language \n‣ Everything requires a compilation: not easy to try a simple task \n• Interpreted language \n- … does not require an explicit compilation step \n- Your program is “compiled” line-by-line when you execute them \n- Pros \n‣ You don’t have to compile! (i.e. compilation is a part of execution) \n‣ Very easy to try a simple thing quickly \n- Cons \n‣ No grammar check: you will find a problem in your code @ run-time \n‣ Line-by-line compilation ends up slow execution speed\n\nSo… What Are We Going to Cover?\n• Basics of C++ \n- “Hello World” program … learn how to compile a simple program \n- C++ class & functions \n- C++ class inheritance & templates \n• Basics of Python \n- “Hello World” program \n- Python class & functions \n- “Everything-is-object” \n• Advanced topics \n- C++ std libraries (STL containers, std algorithms, etc) \n- Scientific python libraries (sci/numpy, matplotlib, pandas) \n- “C++ in Python” (accessing C++ class/functions from Python)\nYou tell me what you want to cover!\n\nWhat I Do NOT Plan To Cover\n• How to use a text editor \n• How to use “terminal” (i.e. shell language) \n• How to use ROOT (this, we can negotiate…) \n- Very well written tutorial here\n\nC++ Introduction \n~ Link: “if programming languages were vehicle” ~\n\n• Checkout the example from my web space\nC++ introduction\n• Find 7 sub-directories under playground/Introduction \n- simplest … simplest “main” program \n- example_00 ... simple “hello world” program \n- example_01 ... “hello world” using a function \n- example_02 ... “hello world” using a class \n- example_03 ... separation of class/function from driver code \n- example_04 ... class inheritance \n- example_05 ... template\n• Recommended C++ resource ... a lot can be found online \n- cplusplus.com \n- cppreference.com\nwww2.lns.mit.edu/~kazuhiro/Summer2015_CPPIntro.tar.gz\n• If you are on uboonegpvm machine:  \n \n> source /grid/fermiapp/products/uboone/setup_uboone.sh \n \n> setup gcc v4_9_2\n\n• Compile simplest.cc\nIf you are on Unix/Linux with LLVM (OSX, Ubuntu 14)\nOther Unix/Linux (Ubuntu 12, SL6)\nExecute simplest\nCompilation methods same for example_0X\nC++ introduction ... simplest\n\n• Compile example_00.cc\nC++ introduction ... example_00\nIf you are on Unix/Linux with LLVM (OSX, Ubuntu 14)\nOther Unix/Linux (Ubuntu 12, SL6)\nExecute example_00.exe\nCompilation methods same for example_0X\n\nC++ introduction ... example_01\n• example_01.cc\n• Introduced C++ function, “HelloWorldFunc”\n• Nope, nothing more than that. Moving on...\n\nC++ introduction ... example_02\n• example_02.cc\n• Introduced C++ class, “HelloWorldClass” \n- Read (a lot) more about classes here\n\nC++ introduction\n• Why those 3 trivial (and boring) examples? \n- remind you about a simple C++ executable \n- make sure you know about class/functions \n- write code with class/functions without a dedicated build system \n• Introduction to reusable code structure \n- “main” function is a driver function to be executed \n- Other functions/classes can be re-used for various “main” functions \n- To achieve this, we use a pre-processor command “#include”\n\nC++ introduction ... example_03\nexample_03.h\nexample_03.cc\n• Defined class/functions in “example_03.h” \n- now various *.cc can call #include example_03.h and share code\n• Nope, nothing more than that. Moving on...\n\nC++ introduction ... example_04\nBase class: Polygon \n- defines “width” and “height” \n- defines a setter function \n- defines useless “area” function \nChild class: Rectangle \n- overrides “area” function \nChild class: Triangle \n- overrides “area” function\npolygon.h\n• Class inheritance \n- Children classes inherit various features from parent class. Read here. \n- Greatly helps re-usable code design\n\nC++ introduction ... example_04\nexample_04.cc\nOutput of executing example_04.exe\n\nC++ introduction ... example_05\n• Class/Function template \n- You write abstract description without specifying the subject type. Read here. \n- Greatly helps re-usable code design\npolygon.h\nClass structures same as example_04 \nBut this uses a template type “T” instead of “int”\n\nC++ introduction ... example_05\nexample_05.cc\nOutput of executing example_05.exe\nTemplate specialized to float type \n(classes can be re-used for various type)\n\nC++ introduction\n• Hope those 6 examples taught/remind you... \n- How to write a simple C++ code quickly, compile, and test-run it \n- C++ class and functions \n- Inheritance and class/function template for re-usable code design\n• Example code design for finding “hit” from an waveform\n• I need to read an waveform from a data file \n• I want to fill some histograms of “hit” \n• I want to try writing two algorithms \n- Gaussian shaped waveform hit \n- Landau shaped waveform hit\n\nC++ introduction\n• Hope those 6 examples taught/remind you... \n- How to write a simple C++ code quickly, compile, and test-run it \n- C++ class and functions \n- Inheritance and class/function template for re-usable code design\n• Example code design for finding “hit” from an waveform\nI/O Class \nRead data file\nAlgorithm base class \nDefines analysis histograms\nLandauHit Algorithm \nFind “landau hit”\nManager Class \nUse I/O class and  \nexecutes algorithm\nGausHit Algorithm \nFind “gaussian hit” \n• Writing an algorithm requires minimal effort \n- Focus on “find hit from an waveform” \n- Nothing else. No “data read”. No “make TH1”. \n- Algorithm becomes simple and readable \n• Algorithm base class for common features \n- All algorithms benefit from changes here \n‣ e.g.) Add a new histogram \n• I/O class decouples data product dependency \n- Simply replace I/O class for each fmwk \n- No need to change the rest of the code\n\nOK... let’s take a break here... \nAny question?  \nAny coffee/donuts left?\n",
  "num_pages": 22,
  "filename": "1748291271186-Summer2015_CPPTutorial_00.pdf",
  "file_type": "pdf",
  "class": "",
  "topic": ""
}